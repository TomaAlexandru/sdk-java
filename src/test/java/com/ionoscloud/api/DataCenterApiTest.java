/*
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.api;

import com.ionoscloud.ApiException;
import com.ionoscloud.model.Datacenter;
import com.ionoscloud.model.DatacenterProperties;
import com.ionoscloud.model.Datacenters;
import com.ionoscloud.model.Error;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataCenterApi
 */
@Ignore
public class DataCenterApiTest {

    private final DataCenterApi api = new DataCenterApi();

    
    /**
     * Delete a Data Center
     *
     * Will remove all objects within the datacenter and remove the datacenter object itself, too. This is a highly destructive method which should be used with caution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersDeleteTest() throws ApiException {
        String datacenterId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersDelete(datacenterId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Data Center
     *
     * You can retrieve a data center by using the resource&#39;s ID. This value can be found in the response body when a datacenter is created or when you GET a list of datacenters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersFindByIdTest() throws ApiException {
        String datacenterId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Datacenter response = api.datacentersFindById(datacenterId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List Data Centers under your account
     *
     * You can retrieve a complete list of data centers provisioned under your account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersGetTest() throws ApiException {
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Integer offset = null;
        Integer limit = null;
        Datacenters response = api.datacentersGet(pretty, depth, xContractNumber, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Partially modify a Data Center
     *
     * You can use update datacenter to re-name the datacenter or update its description
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersPatchTest() throws ApiException {
        String datacenterId = null;
        DatacenterProperties datacenter = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Datacenter response = api.datacentersPatch(datacenterId, datacenter, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Create a Data Center
     *
     * Virtual data centers are the foundation of the platform. They act as logical containers for all other objects you will be creating, e.g. servers. You can provision as many data centers as you want. Datacenters have their own private network and are logically segmented from each other to create isolation. You can use this POST method to create a simple datacenter or to create a datacenter with multiple objects under it such as servers and storage volumes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersPostTest() throws ApiException {
        Datacenter datacenter = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Datacenter response = api.datacentersPost(datacenter, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify a Data Center
     *
     * You can use update datacenter to re-name the datacenter or update its description
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersPutTest() throws ApiException {
        String datacenterId = null;
        Datacenter datacenter = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Datacenter response = api.datacentersPut(datacenterId, datacenter, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
}
