/*
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.api;

import com.ionoscloud.ApiException;
import com.ionoscloud.model.Error;
import com.ionoscloud.model.FirewallRule;
import com.ionoscloud.model.FirewallRules;
import com.ionoscloud.model.FirewallruleProperties;
import com.ionoscloud.model.Nic;
import com.ionoscloud.model.NicProperties;
import com.ionoscloud.model.Nics;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NicApi
 */
@Ignore
public class NicApiTest {

    private final NicApi api = new NicApi();

    
    /**
     * Delete a Nic
     *
     * Deletes the specified NIC.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsDeleteTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String nicId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersServersNicsDelete(datacenterId, serverId, nicId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Nic
     *
     * Retrieves the attributes of a given NIC
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsFindByIdTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String nicId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Nic response = api.datacentersServersNicsFindById(datacenterId, serverId, nicId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Delete a Firewall Rule
     *
     * Removes the specific Firewall Rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsFirewallrulesDeleteTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String nicId = null;
        String firewallruleId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersServersNicsFirewallrulesDelete(datacenterId, serverId, nicId, firewallruleId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Firewall Rule
     *
     * Retrieves the attributes of a given Firewall Rule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsFirewallrulesFindByIdTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String nicId = null;
        String firewallruleId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        FirewallRule response = api.datacentersServersNicsFirewallrulesFindById(datacenterId, serverId, nicId, firewallruleId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List Firewall Rules 
     *
     * Retrieves a list of firewall rules associated with a particular NIC
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsFirewallrulesGetTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String nicId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Integer offset = null;
        Integer limit = null;
        FirewallRules response = api.datacentersServersNicsFirewallrulesGet(datacenterId, serverId, nicId, pretty, depth, xContractNumber, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Partially modify a Firewall Rule
     *
     * You can use update attributes of a resource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsFirewallrulesPatchTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String nicId = null;
        String firewallruleId = null;
        FirewallruleProperties firewallrule = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        FirewallRule response = api.datacentersServersNicsFirewallrulesPatch(datacenterId, serverId, nicId, firewallruleId, firewallrule, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Create a Firewall Rule
     *
     * This will add a Firewall Rule to the NIC
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsFirewallrulesPostTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String nicId = null;
        FirewallRule firewallrule = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        FirewallRule response = api.datacentersServersNicsFirewallrulesPost(datacenterId, serverId, nicId, firewallrule, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify a Firewall Rule
     *
     * You can use update attributes of a resource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsFirewallrulesPutTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String nicId = null;
        String firewallruleId = null;
        FirewallRule firewallrule = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        FirewallRule response = api.datacentersServersNicsFirewallrulesPut(datacenterId, serverId, nicId, firewallruleId, firewallrule, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List Nics 
     *
     * Retrieves a list of NICs.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsGetTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Integer offset = null;
        Integer limit = null;
        Nics response = api.datacentersServersNicsGet(datacenterId, serverId, pretty, depth, xContractNumber, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Partially modify a Nic
     *
     * You can use update attributes of a Nic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsPatchTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String nicId = null;
        NicProperties nic = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Nic response = api.datacentersServersNicsPatch(datacenterId, serverId, nicId, nic, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Create a Nic
     *
     * Adds a NIC to the target server. Combine count of Nics and volumes attached to the server should not exceed size 24.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsPostTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        Nic nic = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Nic response = api.datacentersServersNicsPost(datacenterId, serverId, nic, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify a Nic
     *
     * You can use update attributes of a Nic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsPutTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String nicId = null;
        Nic nic = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Nic response = api.datacentersServersNicsPut(datacenterId, serverId, nicId, nic, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
}
