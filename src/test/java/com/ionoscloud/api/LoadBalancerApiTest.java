/*
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.api;

import com.ionoscloud.ApiException;
import com.ionoscloud.model.BalancedNics;
import com.ionoscloud.model.Error;
import com.ionoscloud.model.Loadbalancer;
import com.ionoscloud.model.LoadbalancerProperties;
import com.ionoscloud.model.Loadbalancers;
import com.ionoscloud.model.Nic;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LoadBalancerApi
 */
@Ignore
public class LoadBalancerApiTest {

    private final LoadBalancerApi api = new LoadBalancerApi();

    
    /**
     * Detach a nic from loadbalancer
     *
     * This will remove a nic from Load Balancer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLoadbalancersBalancednicsDeleteTest() throws ApiException {
        String datacenterId = null;
        String loadbalancerId = null;
        String nicId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersLoadbalancersBalancednicsDelete(datacenterId, loadbalancerId, nicId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a nic attached to Load Balancer
     *
     * This will retrieve the properties of an attached nic.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLoadbalancersBalancednicsFindByNicIdTest() throws ApiException {
        String datacenterId = null;
        String loadbalancerId = null;
        String nicId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Nic response = api.datacentersLoadbalancersBalancednicsFindByNicId(datacenterId, loadbalancerId, nicId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List Load Balancer Members 
     *
     * You can retrieve a list of nics attached to a Load Balancer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLoadbalancersBalancednicsGetTest() throws ApiException {
        String datacenterId = null;
        String loadbalancerId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Integer offset = null;
        Integer limit = null;
        BalancedNics response = api.datacentersLoadbalancersBalancednicsGet(datacenterId, loadbalancerId, pretty, depth, xContractNumber, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Attach a nic to Load Balancer
     *
     * This will attach a pre-existing nic to a Load Balancer. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLoadbalancersBalancednicsPostTest() throws ApiException {
        String datacenterId = null;
        String loadbalancerId = null;
        Nic nic = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Nic response = api.datacentersLoadbalancersBalancednicsPost(datacenterId, loadbalancerId, nic, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Delete a Loadbalancer.
     *
     * Removes the specific Loadbalancer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLoadbalancersDeleteTest() throws ApiException {
        String datacenterId = null;
        String loadbalancerId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersLoadbalancersDelete(datacenterId, loadbalancerId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a loadbalancer
     *
     * Retrieves the attributes of a given Loadbalancer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLoadbalancersFindByIdTest() throws ApiException {
        String datacenterId = null;
        String loadbalancerId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Loadbalancer response = api.datacentersLoadbalancersFindById(datacenterId, loadbalancerId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List Load Balancers
     *
     * Retrieve a list of Load Balancers within the datacenter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLoadbalancersGetTest() throws ApiException {
        String datacenterId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Integer offset = null;
        Integer limit = null;
        Loadbalancers response = api.datacentersLoadbalancersGet(datacenterId, pretty, depth, xContractNumber, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Partially modify a Loadbalancer
     *
     * You can use update attributes of a resource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLoadbalancersPatchTest() throws ApiException {
        String datacenterId = null;
        String loadbalancerId = null;
        LoadbalancerProperties loadbalancer = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Loadbalancer response = api.datacentersLoadbalancersPatch(datacenterId, loadbalancerId, loadbalancer, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Create a Load Balancer
     *
     * Creates a Loadbalancer within the datacenter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLoadbalancersPostTest() throws ApiException {
        String datacenterId = null;
        Loadbalancer loadbalancer = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Loadbalancer response = api.datacentersLoadbalancersPost(datacenterId, loadbalancer, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify a Load Balancer
     *
     * You can use update attributes of a resource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLoadbalancersPutTest() throws ApiException {
        String datacenterId = null;
        String loadbalancerId = null;
        Loadbalancer loadbalancer = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Loadbalancer response = api.datacentersLoadbalancersPut(datacenterId, loadbalancerId, loadbalancer, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
}
