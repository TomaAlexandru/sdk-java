/*
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.api;

import com.ionoscloud.ApiException;
import com.ionoscloud.model.Error;
import com.ionoscloud.model.Lan;
import com.ionoscloud.model.LanNics;
import com.ionoscloud.model.LanPost;
import com.ionoscloud.model.LanProperties;
import com.ionoscloud.model.Lans;
import com.ionoscloud.model.Nic;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LanApi
 */
@Ignore
public class LanApiTest {

    private final LanApi api = new LanApi();

    
    /**
     * Delete a Lan.
     *
     * Removes the specific Lan
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLansDeleteTest() throws ApiException {
        String datacenterId = null;
        String lanId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersLansDelete(datacenterId, lanId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Lan
     *
     * Retrieves the attributes of a given LAN
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLansFindByIdTest() throws ApiException {
        String datacenterId = null;
        String lanId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Lan response = api.datacentersLansFindById(datacenterId, lanId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List Lans
     *
     * Retrieve a list of LANs within the datacenter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLansGetTest() throws ApiException {
        String datacenterId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Integer offset = null;
        Integer limit = null;
        Lans response = api.datacentersLansGet(datacenterId, pretty, depth, xContractNumber, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Retrieve a nic attached to lan
     *
     * This will retrieve the properties of an attached nic.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLansNicsFindByIdTest() throws ApiException {
        String datacenterId = null;
        String lanId = null;
        String nicId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Nic response = api.datacentersLansNicsFindById(datacenterId, lanId, nicId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List Lan Members 
     *
     * You can retrieve a list of nics attached to a lan
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLansNicsGetTest() throws ApiException {
        String datacenterId = null;
        String lanId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Integer offset = null;
        Integer limit = null;
        LanNics response = api.datacentersLansNicsGet(datacenterId, lanId, pretty, depth, xContractNumber, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Attach a nic
     *
     * This will attach a pre-existing nic to a lan. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLansNicsPostTest() throws ApiException {
        String datacenterId = null;
        String lanId = null;
        Nic nic = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Nic response = api.datacentersLansNicsPost(datacenterId, lanId, nic, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Partially modify a Lan
     *
     * You can use update attributes of a resource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLansPatchTest() throws ApiException {
        String datacenterId = null;
        String lanId = null;
        LanProperties lan = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Lan response = api.datacentersLansPatch(datacenterId, lanId, lan, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Create a Lan
     *
     * Creates a LAN within the datacenter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLansPostTest() throws ApiException {
        String datacenterId = null;
        LanPost lan = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        LanPost response = api.datacentersLansPost(datacenterId, lan, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify a Lan
     *
     * You can use update attributes of a resource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLansPutTest() throws ApiException {
        String datacenterId = null;
        String lanId = null;
        Lan lan = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Lan response = api.datacentersLansPut(datacenterId, lanId, lan, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
}
