/*
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.api;

import com.ionoscloud.ApiException;
import com.ionoscloud.model.Error;
import com.ionoscloud.model.Snapshot;
import com.ionoscloud.model.Volume;
import com.ionoscloud.model.VolumeProperties;
import com.ionoscloud.model.Volumes;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VolumeApi
 */
@Ignore
public class VolumeApiTest {

    private final VolumeApi api = new VolumeApi();

    
    /**
     * Create Volume Snapshot
     *
     * Creates a snapshot of a volume within the datacenter. You can use a snapshot to create a new storage volume or to restore a storage volume.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersVolumesCreateSnapshotPostTest() throws ApiException {
        String datacenterId = null;
        String volumeId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        String name = null;
        String description = null;
        Boolean secAuthProtection = null;
        String licenceType = null;
        Snapshot response = api.datacentersVolumesCreateSnapshotPost(datacenterId, volumeId, pretty, depth, xContractNumber, name, description, secAuthProtection, licenceType);

        // TODO: test validations
    }
    
    /**
     * Delete a Volume
     *
     * Deletes the specified volume. This will result in the volume being removed from your datacenter. Use this with caution.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersVolumesDeleteTest() throws ApiException {
        String datacenterId = null;
        String volumeId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersVolumesDelete(datacenterId, volumeId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Volume
     *
     * Retrieves the attributes of a given Volume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersVolumesFindByIdTest() throws ApiException {
        String datacenterId = null;
        String volumeId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Volume response = api.datacentersVolumesFindById(datacenterId, volumeId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List Volumes 
     *
     * Retrieves a list of Volumes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersVolumesGetTest() throws ApiException {
        String datacenterId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Integer offset = null;
        Integer limit = null;
        Volumes response = api.datacentersVolumesGet(datacenterId, pretty, depth, xContractNumber, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Partially modify a Volume
     *
     * You can use update attributes of a Volume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersVolumesPatchTest() throws ApiException {
        String datacenterId = null;
        String volumeId = null;
        VolumeProperties volume = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Volume response = api.datacentersVolumesPatch(datacenterId, volumeId, volume, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Create a Volume
     *
     * Creates a volume within the datacenter. This will not attach the volume to a server. Please see the Servers section for details on how to attach storage volumes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersVolumesPostTest() throws ApiException {
        String datacenterId = null;
        Volume volume = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Volume response = api.datacentersVolumesPost(datacenterId, volume, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify a Volume
     *
     * You can use update attributes of a Volume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersVolumesPutTest() throws ApiException {
        String datacenterId = null;
        String volumeId = null;
        Volume volume = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Volume response = api.datacentersVolumesPut(datacenterId, volumeId, volume, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Restore Volume Snapshot
     *
     * This will restore a snapshot onto a volume. A snapshot is created as just another image that can be used to create subsequent volumes if you want or to restore an existing volume.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersVolumesRestoreSnapshotPostTest() throws ApiException {
        String datacenterId = null;
        String volumeId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        String snapshotId = null;
        Object response = api.datacentersVolumesRestoreSnapshotPost(datacenterId, volumeId, pretty, depth, xContractNumber, snapshotId);

        // TODO: test validations
    }
    
}
