/*
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.api;

import com.ionoscloud.ApiException;
import com.ionoscloud.model.Error;
import com.ionoscloud.model.IpBlock;
import com.ionoscloud.model.IpBlockProperties;
import com.ionoscloud.model.IpBlocks;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IpBlocksApi
 */
@Ignore
public class IpBlocksApiTest {

    private final IpBlocksApi api = new IpBlocksApi();

    
    /**
     * Delete IP Block
     *
     * Removes the specific IP Block
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ipblocksDeleteTest() throws ApiException {
        String ipblockId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.ipblocksDelete(ipblockId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve an IP Block
     *
     * Retrieves the attributes of a given IP Block.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ipblocksFindByIdTest() throws ApiException {
        String ipblockId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        IpBlock response = api.ipblocksFindById(ipblockId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List IP Blocks 
     *
     * Retrieve a list of all reserved IP Blocks
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ipblocksGetTest() throws ApiException {
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        IpBlocks response = api.ipblocksGet(pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Partially modify IP Block
     *
     * You can use update attributes of a resource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ipblocksPatchTest() throws ApiException {
        String ipblockId = null;
        IpBlockProperties ipblock = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        IpBlock response = api.ipblocksPatch(ipblockId, ipblock, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Reserve IP Block
     *
     * This will reserve a new IP Block
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ipblocksPostTest() throws ApiException {
        IpBlock ipblock = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        IpBlock response = api.ipblocksPost(ipblock, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify IP Block
     *
     * You can use update attributes of a resource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ipblocksPutTest() throws ApiException {
        String ipblockId = null;
        IpBlock ipblock = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        IpBlock response = api.ipblocksPut(ipblockId, ipblock, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
}
