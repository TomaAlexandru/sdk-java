/*
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.api;

import com.ionoscloud.ApiException;
import com.ionoscloud.model.Error;
import com.ionoscloud.model.Label;
import com.ionoscloud.model.LabelResource;
import com.ionoscloud.model.LabelResources;
import com.ionoscloud.model.Labels;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LabelApi
 */
@Ignore
public class LabelApiTest {

    private final LabelApi api = new LabelApi();

    
    /**
     * Delete a Label from Data Center
     *
     * This will remove a label from the data center.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLabelsDeleteTest() throws ApiException {
        String datacenterId = null;
        String key = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersLabelsDelete(datacenterId, key, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Label of Data Center
     *
     * This will retrieve the properties of a associated label to a data center.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLabelsFindByKeyTest() throws ApiException {
        String datacenterId = null;
        String key = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        LabelResource response = api.datacentersLabelsFindByKey(datacenterId, key, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List all Data Center Labels
     *
     * You can retrieve a list of all labels associated with a data center
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLabelsGetTest() throws ApiException {
        String datacenterId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Integer offset = null;
        Integer limit = null;
        LabelResources response = api.datacentersLabelsGet(datacenterId, pretty, depth, xContractNumber, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Add a Label to Data Center
     *
     * This will add a label to the data center.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLabelsPostTest() throws ApiException {
        String datacenterId = null;
        LabelResource label = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        LabelResource response = api.datacentersLabelsPost(datacenterId, label, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify a Label of Data Center
     *
     * This will modify the value of the label on a data center.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersLabelsPutTest() throws ApiException {
        String datacenterId = null;
        String key = null;
        LabelResource label = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        LabelResource response = api.datacentersLabelsPut(datacenterId, key, label, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Delete a Label from Server
     *
     * This will remove a label from the server.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersLabelsDeleteTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String key = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersServersLabelsDelete(datacenterId, serverId, key, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Label of Server
     *
     * This will retrieve the properties of a associated label to a server.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersLabelsFindByKeyTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String key = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        LabelResource response = api.datacentersServersLabelsFindByKey(datacenterId, serverId, key, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List all Server Labels
     *
     * You can retrieve a list of all labels associated with a server
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersLabelsGetTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Integer offset = null;
        Integer limit = null;
        LabelResources response = api.datacentersServersLabelsGet(datacenterId, serverId, pretty, depth, xContractNumber, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Add a Label to Server
     *
     * This will add a label to the server.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersLabelsPostTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        LabelResource label = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        LabelResource response = api.datacentersServersLabelsPost(datacenterId, serverId, label, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify a Label of Server
     *
     * This will modify the value of the label on a server.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersLabelsPutTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String key = null;
        LabelResource label = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        LabelResource response = api.datacentersServersLabelsPut(datacenterId, serverId, key, label, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Delete a Label from Volume
     *
     * This will remove a label from the volume.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersVolumesLabelsDeleteTest() throws ApiException {
        String datacenterId = null;
        String volumeId = null;
        String key = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersVolumesLabelsDelete(datacenterId, volumeId, key, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Label of Volume
     *
     * This will retrieve the properties of a associated label to a volume.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersVolumesLabelsFindByKeyTest() throws ApiException {
        String datacenterId = null;
        String volumeId = null;
        String key = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        LabelResource response = api.datacentersVolumesLabelsFindByKey(datacenterId, volumeId, key, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List all Volume Labels
     *
     * You can retrieve a list of all labels associated with a volume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersVolumesLabelsGetTest() throws ApiException {
        String datacenterId = null;
        String volumeId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Integer offset = null;
        Integer limit = null;
        LabelResources response = api.datacentersVolumesLabelsGet(datacenterId, volumeId, pretty, depth, xContractNumber, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Add a Label to Volume
     *
     * This will add a label to the volume.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersVolumesLabelsPostTest() throws ApiException {
        String datacenterId = null;
        String volumeId = null;
        LabelResource label = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        LabelResource response = api.datacentersVolumesLabelsPost(datacenterId, volumeId, label, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify a Label of Volume
     *
     * This will modify the value of the label on a volume.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersVolumesLabelsPutTest() throws ApiException {
        String datacenterId = null;
        String volumeId = null;
        String key = null;
        LabelResource label = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        LabelResource response = api.datacentersVolumesLabelsPut(datacenterId, volumeId, key, label, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Delete a Label from IP Block
     *
     * This will remove a label from the Ip Block.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ipblocksLabelsDeleteTest() throws ApiException {
        String ipblockId = null;
        String key = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.ipblocksLabelsDelete(ipblockId, key, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Label of IP Block
     *
     * This will retrieve the properties of a associated label to a Ip Block.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ipblocksLabelsFindByKeyTest() throws ApiException {
        String ipblockId = null;
        String key = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        LabelResource response = api.ipblocksLabelsFindByKey(ipblockId, key, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List all Ip Block Labels
     *
     * You can retrieve a list of all labels associated with a IP Block
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ipblocksLabelsGetTest() throws ApiException {
        String ipblockId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        LabelResources response = api.ipblocksLabelsGet(ipblockId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Add a Label to IP Block
     *
     * This will add a label to the Ip Block.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ipblocksLabelsPostTest() throws ApiException {
        String ipblockId = null;
        LabelResource label = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        LabelResource response = api.ipblocksLabelsPost(ipblockId, label, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify a Label of IP Block
     *
     * This will modify the value of the label on a Ip Block.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ipblocksLabelsPutTest() throws ApiException {
        String ipblockId = null;
        String key = null;
        LabelResource label = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        LabelResource response = api.ipblocksLabelsPut(ipblockId, key, label, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Returns the label by its URN.
     *
     * You can retrieve the details of a specific label using its URN. A URN is for uniqueness of a Label and composed using urn:label:&lt;resource_type&gt;:&lt;resource_uuid&gt;:&lt;key&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void labelsFindByUrnTest() throws ApiException {
        String labelurn = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Label response = api.labelsFindByUrn(labelurn, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List Labels 
     *
     * You can retrieve a complete list of labels that you have access to.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void labelsGetTest() throws ApiException {
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Labels response = api.labelsGet(pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Delete a Label from Snapshot
     *
     * This will remove a label from the snapshot.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void snapshotsLabelsDeleteTest() throws ApiException {
        String snapshotId = null;
        String key = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.snapshotsLabelsDelete(snapshotId, key, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Label of Snapshot
     *
     * This will retrieve the properties of a associated label to a snapshot.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void snapshotsLabelsFindByKeyTest() throws ApiException {
        String snapshotId = null;
        String key = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        LabelResource response = api.snapshotsLabelsFindByKey(snapshotId, key, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List all Snapshot Labels
     *
     * You can retrieve a list of all labels associated with a snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void snapshotsLabelsGetTest() throws ApiException {
        String snapshotId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        LabelResources response = api.snapshotsLabelsGet(snapshotId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Add a Label to Snapshot
     *
     * This will add a label to the snapshot.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void snapshotsLabelsPostTest() throws ApiException {
        String snapshotId = null;
        LabelResource label = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        LabelResource response = api.snapshotsLabelsPost(snapshotId, label, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify a Label of Snapshot
     *
     * This will modify the value of the label on a snapshot.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void snapshotsLabelsPutTest() throws ApiException {
        String snapshotId = null;
        String key = null;
        LabelResource label = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        LabelResource response = api.snapshotsLabelsPut(snapshotId, key, label, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
}
