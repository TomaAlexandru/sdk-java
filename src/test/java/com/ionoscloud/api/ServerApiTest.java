/*
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.api;

import com.ionoscloud.ApiException;
import com.ionoscloud.model.AttachedVolumes;
import com.ionoscloud.model.Cdroms;
import com.ionoscloud.model.Error;
import com.ionoscloud.model.Image;
import com.ionoscloud.model.Server;
import com.ionoscloud.model.ServerProperties;
import com.ionoscloud.model.Servers;
import com.ionoscloud.model.Volume;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServerApi
 */
@Ignore
public class ServerApiTest {

    private final ServerApi api = new ServerApi();

    
    /**
     * Detach a CD-ROM
     *
     * This will detach a CD-ROM from the server
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersCdromsDeleteTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String cdromId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersServersCdromsDelete(datacenterId, serverId, cdromId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve an attached CD-ROM
     *
     * You can retrieve a specific CD-ROM attached to the server
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersCdromsFindByIdTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String cdromId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Image response = api.datacentersServersCdromsFindById(datacenterId, serverId, cdromId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List attached CD-ROMs 
     *
     * You can retrieve a list of CD-ROMs attached to the server.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersCdromsGetTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Integer offset = null;
        Integer limit = null;
        Cdroms response = api.datacentersServersCdromsGet(datacenterId, serverId, pretty, depth, xContractNumber, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Attach a CD-ROM
     *
     * You can attach a CD-ROM to an existing server. You can attach up to 2 CD-ROMs to one server. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersCdromsPostTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        Image cdrom = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Image response = api.datacentersServersCdromsPost(datacenterId, serverId, cdrom, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Delete a Server
     *
     * This will remove a server from your datacenter; however, it will not remove the storage volumes attached to the server. You will need to make a separate API call to perform that action
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersDeleteTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersServersDelete(datacenterId, serverId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Server
     *
     * Returns information about a server such as its configuration, provisioning status, etc.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersFindByIdTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Server response = api.datacentersServersFindById(datacenterId, serverId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List Servers 
     *
     * You can retrieve a list of servers within a datacenter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersGetTest() throws ApiException {
        String datacenterId = null;
        Boolean pretty = null;
        Integer depth = null;
        Boolean upgradeNeeded = null;
        Integer xContractNumber = null;
        Integer offset = null;
        Integer limit = null;
        Servers response = api.datacentersServersGet(datacenterId, pretty, depth, upgradeNeeded, xContractNumber, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Partially modify a Server
     *
     * You can use update attributes of a server
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersPatchTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        ServerProperties server = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Server response = api.datacentersServersPatch(datacenterId, serverId, server, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Create a Server
     *
     * Creates a server within an existing datacenter. You can configure the boot volume and connect the server to an existing LAN.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersPostTest() throws ApiException {
        String datacenterId = null;
        Server server = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Server response = api.datacentersServersPost(datacenterId, server, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify a Server
     *
     * Allows to modify the attributes of a Server. From v5 onwards &#39;allowReboot&#39; attribute will no longer be available. For certain server property change it was earlier forced to be provided. Now this behaviour is implicit and backend will do this automatically e.g. in earlier versions, when CPU family changes, the &#39;allowReboot&#39; property was required to be set to true which will no longer be the case and the server will be rebooted automatically
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersPutTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        Server server = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Server response = api.datacentersServersPut(datacenterId, serverId, server, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Reboot a Server
     *
     * This will force a hard reboot of the server. Do not use this method if you want to gracefully reboot the machine. This is the equivalent of powering off the machine and turning it back on.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersRebootPostTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersServersRebootPost(datacenterId, serverId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Start a Server
     *
     * This will start a server. If the server&#39;s public IP was deallocated then a new IP will be assigned
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersStartPostTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersServersStartPost(datacenterId, serverId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Stop a Server
     *
     * This will stop a server. The machine will be forcefully powered off, billing will cease, and the public IP, if one is allocated, will be deallocated. The operation is not supported for Cube servers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersStopPostTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersServersStopPost(datacenterId, serverId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Upgrade a Server
     *
     * This will upgrade the version of the server, if needed. To verify if there is an upgrade available for a server, call &#39;/datacenters/{datacenterId}/servers?upgradeNeeded&#x3D;true&#39;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersUpgradePostTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersServersUpgradePost(datacenterId, serverId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Detach a volume
     *
     * This will detach the volume from the server. This will not delete the volume from your datacenter. You will need to make a separate request to perform a deletion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersVolumesDeleteTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String volumeId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersServersVolumesDelete(datacenterId, serverId, volumeId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve an attached volume
     *
     * This will retrieve the properties of an attached volume.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersVolumesFindByIdTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String volumeId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Volume response = api.datacentersServersVolumesFindById(datacenterId, serverId, volumeId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List Attached Volumes
     *
     * You can retrieve a list of volumes attached to the server
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersVolumesGetTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Integer offset = null;
        Integer limit = null;
        AttachedVolumes response = api.datacentersServersVolumesGet(datacenterId, serverId, pretty, depth, xContractNumber, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Attach a volume
     *
     * This will attach a pre-existing storage volume to the server. It is also possible to create and attach a volume in one step just by providing a new volume description as payload. Combine count of Nics and volumes attached to the server should not exceed size 24.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersVolumesPostTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        Volume volume = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Volume response = api.datacentersServersVolumesPost(datacenterId, serverId, volume, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
}
